FLEXBOX

1- O que é Flexbox 

• Flexbox é um valor da propriedade display;
• Esta é a maneira mais utilizada para acondicionar elementos em um container;
• Temos diversas regras dentro do flex 
• O flex deve ser considerado no elemento pai, e os elementos filhos serão os movimentados;
• Os elementos filhos também podem ter regras específicas;

2- Aplicando flex

• Para aplicar o flex vamos precisar de uma estrutura base;
• consiste em um container e elementos filhos dentro do container;
• colocamos a regra display com o valor de flex no container, e agora os elementos estão seguindo o fluxo do flex;
• com flex todos os elementos se comportam parecido com os elementos inline;

3- Flex direction

• Podemos mudar o comportamento inline do flex (chamado de row);
• Alterando o flex-diraction para column, teremos agora os itens se comportando como elementos de bloco;
• O valor padrão de direction é row;

4- Flex wrap

• O flex tenta colocar todos os elementos na mesma linha por padrão;
• Porém há situações que queremos x elementos por linha;
• Para isso acontecer devemos aplicar a regra flex-wrap com o valor de wrap;
• Agora as linhas respeitam a largura dos elementos;

5- Posicionando conteúdo

• Com justify-content é possível mudar como o conteúdo é posicionado no eixo horizontal;
• Temos alguns valores interessantes nesta propiedade;
• Por exemplo: centralizar os elementos na horizontal, basta colocar o valor do center;

6- GAP

• O gap é uma regra que serve para colocar espaço entre elementos que estão no flex;
• Nós especificamos a medida em px, por exemplo;
• E este valor é adicionado entre cada um dos elementos;

7- Order

• Com a order podemos mudar a ordem dos elementos;
• Esta propriedade é utilizada nos elementos filhos;
• Agora começamos com as regras que são aplicadas aos elementos filhos, não ao elemento pai;

8- Grow

• Com a regra flex-grow podemos mudar a proporção de um ou mais elementos filhos;
• Nota: A width precisa estar sem valor, como automática;
• Exemplo: Se colocarmos grow como 2, o elemento vai crescer duas vezes mais que os outros quando estiver se adaptando no container;

9- Basis

• A regra flex-basis configura a largura base do elemento;
• Nós podemos trabalhar com basis e grow juntas!
• Grow vai preencher toda a largura que basis deixar vazia;

10- Shrink

• Shrink é o oposto de grow;
• Quando utilizamos precisamos manter o tamanho dos outros elementos, então o elemento do shrink diminui o seu tamanho para manter o dos outros;
• Nota: usamos esta regra em conjunto de basis e grow;

11- Flex shorthand

• Utilizando apenas flex conseguimos configurar grow, shrink e basis;
• Colocamos os valores nesta ordem também;
• Desta maneira: flex: 2 1 100px;
• Isso dá ao elemento: grow = 2, shrink = 1 e basis = 100px;

12- Auto alinhamento

• Aregra align-self alinha um elemento diferente dos demais;
• Podemos centralizar um elemento enquanto os outros seguem a regra de alinhamento container;